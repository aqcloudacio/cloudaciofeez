{"remainingRequest":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\src\\components\\RiskProfileTable.vue?vue&type=style&index=0&media=screen&lang=css&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\src\\components\\RiskProfileTable.vue","mtime":1612241405843},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQovKiAuaGVhZGVyLWNhcmQgew0KICBib3JkZXI6IDFweCBzb2xpZCAgIWltcG9ydGFudA0KfSAqLw0KLmFsbG9jYXRpb25OdW1iZXIgaW5wdXRbdHlwZT0nbnVtYmVyJ10gew0KICAtbW96LWFwcGVhcmFuY2U6dGV4dGZpZWxkOw0KfQ0KLmFsbG9jYXRpb25OdW1iZXIgaW5wdXQ6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sDQouYWxsb2NhdGlvbk51bWJlciBpbnB1dDo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7DQogIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsNCn0NCi5hbGxvY2F0aW9uTnVtYmVyIGlucHV0IHsNCiAgZm9udC1zaXplOiAuOGVtOw0KfQ0K"},{"version":3,"sources":["RiskProfileTable.vue"],"names":[],"mappingskmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RiskProfileTable.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\r\n  <v-container class=\"pa-0\">\r\n      <v-row align=\"center\">\r\n        <v-col\r\n        :cols=\"6\">\r\n          <v-select\r\n            class=\"rounded-card\"\r\n            v-if=\"!editGroupName\"\r\n            :items=\"riskProfileGroups\"\r\n            item-text=\"name\"\r\n            item-value=\"id\"\r\n            v-model=\"shownRP\"\r\n            label=\"Risk Profile Group Name\"\r\n            placeholder=\"Select a Risk Profile Group\"\r\n            outlined dense hide-details=\"auto\">\r\n            <template v-slot:append-outer v-if=\"canEdit && !_.isEmpty(shownRPObject)\">\r\n              <v-icon\r\n                v-if=\"!editGroupName\"\r\n                color=\"primary\" icon\r\n                @click=\"editGroupName = !editGroupName\">mdi-pencil-circle</v-icon>\r\n            </template>\r\n            <template v-slot:append-outer v-else-if=\"!_.isEmpty(shownRPObject)\">\r\n              <v-tooltip bottom>\r\n                 <template v-slot:activator=\"{ on }\">\r\n                    <v-icon\r\n                      v-on='on'\r\n                      color=\"primary\" icon\r\n                      >mdi-lock</v-icon>\r\n                </template>\r\n                <span>{{lockMessage}}</span>\r\n              </v-tooltip>\r\n            </template>\r\n          </v-select>\r\n          <v-text-field\r\n            v-else\r\n            label=\"Risk Profile Group Name\"\r\n            :value=\"shownRPObject.name\"\r\n            @change=\"newGroupName = $event\"\r\n            dense outlined\r\n            hide-details=\"auto\">\r\n            <template v-slot:append-outer v-if=\"canEdit\">\r\n              <v-icon\r\n                v-if=\"editGroupName\"\r\n                color=\"green\" icon\r\n                @click=\"updateGroupName()\">mdi-check-circle</v-icon>\r\n            </template>\r\n          </v-text-field>\r\n        </v-col>\r\n        <v-col>\r\n          <v-container class=\"pa-0 d-flex\">\r\n            <v-switch\r\n              inset\r\n              v-if=\"!_.isEmpty(shownRPObject)\"\r\n              v-model=\"activeSwitch\"\r\n              label=\"Active Risk Profile Group\"\r\n              />\r\n            <v-spacer />\r\n            <v-card-actions class=\"pr-0\">\r\n              <DeleteObj\r\n                v-if=\"canEdit && !_.isEmpty(shownRPObject)\"\r\n                :objectType=\"'riskprofilegroup'\"\r\n                :objectToDelete=\"shownRPObject\"\r\n                @delete-object=\"deleteRPGroup($event)\"\r\n                :color=\"'primary'\"\r\n\r\n              />\r\n              <AddRPGroup\r\n                :userID=\"activeUser.id\"\r\n                @add-rpgroup=\"addRPGroup($event)\"/>\r\n\r\n\r\n            </v-card-actions>\r\n          </v-container>\r\n        </v-col>\r\n      </v-row>\r\n      <v-divider class=\"mt-1 mb-4\" v-if=\"!_.isEmpty(shownRPObject)\"/>\r\n      <v-row dense v-if=\"!_.isEmpty(shownRPObject)\">\r\n        <v-col\r\n          :cols=\"2\">\r\n\r\n        </v-col>\r\n        <v-col\r\n          v-for=\"AAName in nameSet\"\r\n          :key=\"Object.keys(AAName)[0]\"\r\n          >\r\n          <v-tooltip top>\r\n             <template v-slot:activator=\"{ on }\">\r\n              <v-card\r\n                outlined\r\n                class=\"grey1 rounded-card\"\r\n\r\n                flat\r\n                v-on=\"on\">\r\n                <v-card-subtitle class=\"text-center py-1\">\r\n                  {{ getAcronym(Object.values(AAName)[0]) }}\r\n                </v-card-subtitle>\r\n              </v-card>\r\n            </template>\r\n            <span>{{ Object.values(AAName)[0] }}</span>\r\n          </v-tooltip>\r\n        </v-col>\r\n        <v-col\r\n          :cols=\"1\"\r\n          align-self=\"center\">\r\n          <AANameConfig\r\n            v-if=\"canEdit\"\r\n            :RPAANames=\"RPAANames\"/>\r\n        </v-col>\r\n      </v-row>\r\n      <v-form\r\n        @submit.prevent=\"onSubmit\"\r\n        ref=\"mainForm\">\r\n        <v-row\r\n          v-for=\"profile in riskProfiles\"\r\n          :key=\"profile.id\"\r\n          dense\r\n          :style='checkColor(profile)'\r\n          >\r\n          <v-col\r\n            :cols=\"2\">\r\n            <v-text-field\r\n              class=\"rounded-card\"\r\n              @change=\"addToChanged(profile)\"\r\n              v-model=\"profile.name\"\r\n              dense outlined\r\n              :rules=\"[v => !!(v) || 'Must enter a name']\"\r\n              validate-on-blur\r\n              hide-details=\"auto\"\r\n              :read-only=\"!canEdit\">\r\n              <template\r\n                v-if=\"checkHint(profile)\"\r\n                v-slot:append>\r\n                <v-tooltip\r\n                  bottom\r\n                >\r\n                  <template v-slot:activator=\"{ on }\">\r\n                    <v-icon v-on=\"on\" color=\"red\">\r\n                      mdi-alert-rhombus-outline\r\n                    </v-icon>\r\n                  </template>\r\n                  {{ checkHint(profile)}}\r\n                </v-tooltip>\r\n              </template>\r\n            </v-text-field>\r\n          </v-col>\r\n          <v-col\r\n            v-for=\"AAName in nameSet\"\r\n            :key=\"Object.keys(AAName)[0]\"\r\n            align-self=\"center\">\r\n              <v-text-field\r\n                :disabled=\"!canEdit\"\r\n                @change=\"addToChanged(profile)\"\r\n                :value = \"getAAPercentage(AAName,profile)\"\r\n                @blur = \"setAAPercentage($event.target.value, AAName, profile)\"\r\n                class=\"allocationNumber rounded-card\"\r\n                type=\"number\"\r\n                outlined dense hide-details/>\r\n          </v-col>\r\n          <v-col\r\n            :cols=\"1\"\r\n            ><v-btn icon>\r\n            <DeleteObj\r\n              v-if=\"canEdit\"\r\n              :objectType=\"'riskprofile'\"\r\n              :objectToDelete=\"profile\"\r\n              :shownRP=\"shownRP\"\r\n              @delete-object=\"deleteRP\"\r\n              v-on=\"$listeners\"\r\n            /> </v-btn>\r\n          </v-col>\r\n        </v-row>\r\n      </v-form>\r\n      <v-form\r\n        @submit.prevent=\"onSubmit\"\r\n        ref=\"addForm\">\r\n        <v-row v-if=\"canEdit && !_.isEmpty(shownRPObject)\"\r\n          dense>\r\n          <v-col\r\n            :cols=\"2\">\r\n              <v-text-field\r\n                v-model=\"newRP.name\"\r\n                outlined dense\r\n                :rules=\"[v => !!(v) || 'Must enter a name']\"\r\n                validate-on-blur\r\n                hide-details=\"auto\"/>\r\n          </v-col>\r\n          <v-col\r\n            v-for=\"AAName in nameSet\"\r\n            :key=\"Object.keys(AAName)[0]\">\r\n              <v-text-field\r\n                type=\"number\"\r\n                v-model=\"newRP.allocations[Object.keys(AAName)[0]]\"\r\n                outlined dense hide-details/>\r\n          </v-col>\r\n          <v-col\r\n            :cols=\"1\">\r\n            <v-btn type=\"button\" color=\"teal\" dark dense\r\n              @click=\"addRP\" icon>\r\n              <v-icon>\r\n                mdi-plus\r\n              </v-icon>\r\n            </v-btn>\r\n          </v-col>\r\n        </v-row>\r\n      </v-form>\r\n      <v-divider class=\"mt-4\" v-if=\"!_.isEmpty(shownRPObject)\" />\r\n      <v-row v-if=\"riskProfiles.length && canEdit\">\r\n        <v-col class=\"text-right\">\r\n          <v-btn @click=\"onSubmit\" color=\"primary\" dark dense text>Update All</v-btn>\r\n        </v-col>\r\n      </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport { apiService } from \"@/common/api.service.js\";\r\nimport AANameConfig from \"@/components/AANameConfig.vue\";\r\nimport DeleteObj from \"@/components/DeleteObj.vue\";\r\nimport AddRPGroup from \"@/components/AddRPGroup.vue\";\r\nimport WithoutWatchers from \"@/components/mixins/WithoutWatchers.js\";\r\n\r\nimport { mapGetters } from \"vuex\";\r\nimport {\r\n  USER_UPDATE\r\n} from \"@/store/actions.type\";\r\nimport {\r\n  SET_ACTIVE_USER_PROP\r\n} from \"@/store/mutations.type\";\r\n\r\nexport default {\r\n  name: \"RiskProfileTable\",\r\n  mixins: [WithoutWatchers],\r\n  props: {\r\n    riskProfileGroups: {\r\n      type: Array,\r\n      required: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      activeSwitch: false,\r\n      newGroupName: \"\",\r\n      editGroupName: false,\r\n      riskProfiles: [],\r\n      RPAANames: [],\r\n      error: null,\r\n      shownRP: null,\r\n      changeList: [],\r\n      newRP: {\r\n        name:\"\",\r\n        order:null,\r\n        allocations:{},\r\n      },\r\n    };\r\n  },\r\n  components: {\r\n    AANameConfig,\r\n    DeleteObj,\r\n    AddRPGroup,\r\n\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"activeUser\"]),\r\n    lockMessage() {\r\n      let msg = '';\r\n      if (!this.isNotAFSLLimited) {\r\n        msg += 'You cannot edit AFSL Risk Profiles'\r\n      }\r\n      else if (!this.isPracticeAdmin) {\r\n        msg += 'You are not an admin of this Practice'\r\n      }\r\n      return msg\r\n    },\r\n    canEdit() {\r\n      if (this.isPracticeAdmin && this.isNotAFSLLimited && this.isNotDefaultTemplate ) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    isPracticeAdmin() {\r\n      if (this.riskProfileGroups && this.shownRP && this.shownRPObject.id) {\r\n        if (this.shownRPObject.active_practices.length > 0) {\r\n          return this.shownRPObject.active_practices.some(item => this.activeUser.admin_practices.includes(item));\r\n        } else {\r\n          return true\r\n        }\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    isNotDefaultTemplate() {\r\n      if (this.riskProfileGroups && this.shownRP) {\r\n        if (this.shownRPObject.template && this.shownRPObject.default) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    isNotAFSLLimited() {\r\n      if (this.riskProfileGroups && this.shownRP) {\r\n        if (this._.isEmpty(this.shownRPObject.afsls)) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    shownRPObject() {\r\n      if (this.riskProfileGroups && this.shownRP) {\r\n          const i = this.riskProfileGroups.findIndex(item => item.id == this.shownRP);\r\n          if (i != -1) {\r\n            //The id is added to the array before the group data comes back from\r\n            // Profile view, so this avoids errors while it comes in.\r\n            return this.riskProfileGroups[i];\r\n          } else {\r\n            return {}\r\n          }\r\n      } else {\r\n        return {}\r\n      }\r\n    },\r\n    nameSet: function (){\r\n      let AANameList = [];\r\n      let checkList = []\r\n      for (let i = 0; i < this.RPAANames.length; i++) {\r\n        let found = false;\r\n        let aaName = this.RPAANames[i];\r\n          if (checkList.includes(aaName.custom_name)) {\r\n            found = true;\r\n          }\r\n          if (!found) {\r\n            let newAA = {};\r\n            newAA[aaName.id] = aaName.custom_name;\r\n            AANameList.push(newAA);\r\n            found = false;\r\n            checkList.push(aaName.custom_name);\r\n          }\r\n      }\r\n      return (AANameList)\r\n    },\r\n    selectedIsActive() {\r\n      if (this.shownRP) {\r\n        if (this.shownRP === this.activeUser.active_rp) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    shownRP: function () {\r\n      this.setActiveSwitch()\r\n      this.getRPAANameData();\r\n      this.getRiskProfiles();\r\n      this.changeList = [];\r\n    },\r\n    activeSwitch: function () {\r\n      this.setActiveRP()\r\n    },\r\n  },\r\n  methods: {\r\n    setActiveSwitch() {\r\n      this.$withoutWatchers(() => {\r\n        if (this.selectedIsActive) {\r\n          this.activeSwitch = true;\r\n        } else {\r\n          this.activeSwitch = false;\r\n        }\r\n      })\r\n    },\r\n    getAcronym(n) {\r\n      // returns the first letters of each word in name as an abbreviation\r\n      if (n) {\r\n        let matches = n.match(/\\b(\\w)/g);\r\n        let acronym = matches.join('');\r\n        return acronym\r\n      } else {\r\n        return n\r\n      }\r\n    },\r\n    checkHint(profile) {\r\n      if (!this.checkComplete(profile)) {\r\n        return \"Allocations do not equal 100%\"\r\n      }\r\n    },\r\n    checkColor(profile){\r\n      if (!this.checkComplete(profile)) {\r\n        // return \"red lighten-4\"\r\n        return ({\r\n          backgroundColor: '#ffebee',\r\n        })\r\n      }\r\n    },\r\n    checkComplete(profile) {\r\n      if (profile.allocations) {\r\n        let value = profile.allocations.reduce( function (a,b) {\r\n          return parseFloat(a) + parseFloat(b.percentage);\r\n        }, 0);\r\n        if (value.toFixed(4) === '1.0000') {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    updateGroupName(){\r\n      this.editGroupName = !this.editGroupName;\r\n      if (this.newGroupName != '') {\r\n        let endpoint = `/api/riskprofilegroups/${this.shownRPObject.id}/`;\r\n        apiService(endpoint, \"PATCH\", {\r\n          name: this.newGroupName,\r\n        }).then(data => {\r\n          this.$emit('update-rpgroup', data);\r\n          this.newGroupName = \"\";\r\n        })\r\n      }\r\n    },\r\n    deleteRP(data) {\r\n      // Removes item from the riskprofiles list\r\n      const removeItem = this.riskProfiles.findIndex(i => i.id === data.id);\r\n      if (removeItem) {\r\n        this.$delete(this.riskProfiles, removeItem);\r\n      }\r\n      // Removes item from the changed list (if it's in it)\r\n      const removeFromChanged = this.changeList.findIndex(i => i.id === data.id);\r\n      if (removeFromChanged >= 0) {\r\n        this.$delete(this.changeList, removeFromChanged);\r\n      }\r\n    },\r\n    deleteRPGroup(data) {\r\n      this.$emit('delete-rpgroup', data);\r\n      this.riskProfiles = [];\r\n    },\r\n    setActiveRP() {\r\n      let setActive = null;\r\n      if (this.activeSwitch) {\r\n        setActive = this.shownRP;\r\n      }\r\n      this.$store.commit(SET_ACTIVE_USER_PROP, {\r\n        'prop': 'active_rp',\r\n        'value': setActive\r\n      })\r\n      this.$store.dispatch(USER_UPDATE);\r\n    },\r\n    addRPGroup(data){\r\n      this.$emit('add-rpgroup')\r\n      this.shownRP = data.id;\r\n    },\r\n    addToChanged(profile) {\r\n      if (!(this.changeList.includes(profile))) {\r\n        this.changeList.push(profile);\r\n      } else {\r\n        const i = this.changeList.findIndex(item => item.id === profile.id);\r\n        this.changeList.splice(i, 1);\r\n        this.changeList.push(profile);\r\n      }\r\n    },\r\n    setAAPercentage(event, AAName, riskProfile) {\r\n      // Gets the key of the aaname item (the key is the id)\r\n      const aaID = Object.keys(AAName)[0];\r\n      let found = false;\r\n      // Iterates the risk profile allocations and attempts to find and item\r\n      // with a matching name_id\r\n      for (let allocation of riskProfile.allocations){\r\n        found = false;\r\n          // If it is found, assign, break the loop and change found var\r\n          if (allocation.name.id.toString() === aaID) {\r\n            allocation.percentage = (event/100).toFixed(4);\r\n            found = true;\r\n            break;\r\n          }\r\n      }\r\n      // If not found, create a new allocation object and add to the RP.\r\n      if (!found) {\r\n        let newAllocation = {}\r\n        newAllocation.name = {}\r\n        newAllocation.name.id = aaID;\r\n        newAllocation.percentage = (event/100).toFixed(4);\r\n        newAllocation.riskprofile = riskProfile.id;\r\n        newAllocation.id = null;\r\n        riskProfile.allocations.push(newAllocation);\r\n      }\r\n    },\r\n    getAAPercentage(AAName, riskProfile) {\r\n      let total = 0\r\n      for (let i=0; i < riskProfile.allocations.length; i++) {\r\n        // Test if the custom_name for the risk profile matches the columm header\r\n        if (riskProfile.allocations[i].name.custom_name === Object.values(AAName)[0]) {\r\n          let percentage = Number(riskProfile.allocations[i].percentage)\r\n          if (percentage > 0) {\r\n            // Add percentages together for merged RP AA names\r\n            total += percentage;\r\n          }\r\n        }\r\n      }\r\n      return (total*100).toFixed(2)\r\n    },\r\n    getRiskProfiles() {\r\n      if (this.shownRP) {\r\n        let endpoint = `/api/riskprofilegroups/${this.shownRP}/riskprofiles/`;\r\n        apiService(endpoint).then(data => {\r\n          this.riskProfiles = data.results;\r\n        });\r\n      }\r\n    },\r\n    getRPAANameData() {\r\n      if (this.shownRP) {\r\n        let endpoint = `/api/riskprofilegroups/${this.shownRP}/riskprofilenames/`;\r\n        apiService(endpoint).then(data => {\r\n          this.RPAANames = data.results;\r\n        });\r\n      }\r\n    },\r\n    addRP() {\r\n      // validates the last row (the add row)\r\n      if (this.$refs.addForm.validate()){\r\n        let endpoint = `/api/riskprofilegroups/${this.shownRP}/riskprofiles/`;\r\n        apiService(endpoint, \"POST\", {\r\n          name: this.newRP.name,\r\n          group: this.shownRP,\r\n          order: this.newRP.order,\r\n        }).then(data => {\r\n          this.addAA(data.id);\r\n        });\r\n\r\n      }\r\n    },\r\n    addAA(id) {\r\n      if (this._.isEmpty(this.newRP.allocations)) {\r\n        this.getRiskProfiles();\r\n        this.newRP.name=\"\";\r\n        this.newRP.order=null;\r\n      } else {\r\n        for (const [key, value] of Object.entries(this.newRP.allocations)) {\r\n          let endpoint = `/api/riskprofilegroups/${this.shownRP}/riskprofiles/${id}/aa/`;\r\n          apiService(endpoint, \"POST\", {\r\n            name_id: key,\r\n            percentage: value/100,\r\n            riskprofile: id\r\n          }).then(() => {\r\n            this.getRiskProfiles();\r\n            this.newRP.name=\"\";\r\n            this.newRP.order=null;\r\n            this.newRP.allocations = {};\r\n          });\r\n        }\r\n      }\r\n    },\r\n    onSubmit() {\r\n      // If there is a new item in the add row, add it too.\r\n      if (!this._.isEmpty(this.newRP.name)) {\r\n        this.addRP();\r\n      }\r\n      if (this.$refs.mainForm.validate()){\r\n        if (this.changeList) {\r\n          for (let i=0; i < this.changeList.length; i++) {\r\n            let endpoint = `/api/riskprofilegroups/${this.shownRP}/riskprofiles/${this.changeList[i].id}/`;\r\n            apiService(endpoint, \"PATCH\", {\r\n              name: this.changeList[i].name,\r\n              group: this.changeList[i].group,\r\n              order: this.changeList[i].order,\r\n            }).then(data => {\r\n              this.updateAA(data.id, this.changeList[i]);\r\n            });\r\n          };\r\n        };\r\n      }\r\n    },\r\n    updateAA(profileID, profile) {\r\n      for (let i=0; i < profile.allocations.length; i++) {\r\n        let endpoint = '';\r\n        let method = '';\r\n        if (profile.allocations[i].id === null) {\r\n          endpoint = `/api/riskprofilegroups/${this.shownRP}/riskprofiles/${profileID}/aa/`;\r\n          method = \"POST\"\r\n        } else {\r\n          endpoint = `/api/riskprofilegroups/${this.shownRP}/riskprofiles/${profileID}/aa/${profile.allocations[i].id}/`;\r\n          method = \"PATCH\"\r\n        };\r\n        apiService(endpoint, method, {\r\n          id: profile.allocations[i].id,\r\n          name_id: profile.allocations[i].name.id,\r\n          percentage: profile.allocations[i].percentage,\r\n          riskprofile: profileID\r\n        }).then(() => {\r\n          this.getRiskProfiles();\r\n          this.changeList=[];\r\n        });\r\n      };\r\n    }\r\n  },\r\n  mounted() {\r\n    this.shownRP = this.activeUser.active_rp;\r\n    this.getRPAANameData();\r\n    this.getRiskProfiles();\r\n  }\r\n};\r\n</script>\r\n<style media=\"screen\" >\r\n/* .header-card {\r\n  border: 1px solid  !important\r\n} */\r\n.allocationNumber input[type='number'] {\r\n  -moz-appearance:textfield;\r\n}\r\n.allocationNumber input::-webkit-outer-spin-button,\r\n.allocationNumber input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n}\r\n.allocationNumber input {\r\n  font-size: .8em;\r\n}\r\n</style>\r\n"]}]}