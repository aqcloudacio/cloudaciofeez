{"remainingRequest":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\src\\components\\ThemeTable.vue?vue&type=style&index=0&media=screen&lang=css&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\src\\components\\ThemeTable.vue","mtime":1610338060110},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hY3RpdmUtY2FyZDpiZWZvcmUgewogIGJhY2tncm91bmQ6IG5vbmUgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["ThemeTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0VA;AACA;AACA","file":"ThemeTable.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\r\n  <v-container class=\"pa-0\">\r\n    <v-form  @submit.prevent=\"onSubmit\">\r\n      <template v-if=\"!scenario\">\r\n        <v-row align=\"center\">\r\n          <v-col\r\n          :cols=\"6\">\r\n            <v-select\r\n                v-if=\"!editThemeName\"\r\n                :items=\"themes\"\r\n                item-text=\"name\"\r\n                return-object\r\n                v-model=\"selectedTheme\"\r\n                label=\"Theme Name\"\r\n                placeholder=\"Select a Theme\"\r\n                outlined dense hide-details>\r\n                <template v-slot:append-outer v-if=\"canEdit\" style=\"margin-top: 0px\">\r\n                  <v-icon\r\n                    v-if=\"!editThemeName && themeIsSelected\"\r\n                    color=\"green\" icon\r\n                    @click=\"editThemeName = !editThemeName\">mdi-pencil-circle</v-icon>\r\n                </template>\r\n                <template v-slot:append-outer v-else-if=\"!canEdit && themeIsSelected\">\r\n                  <v-tooltip bottom>\r\n                     <template v-slot:activator=\"{ on }\">\r\n                        <v-icon\r\n                          v-on='on'\r\n                          color=\"teal\" icon\r\n                          >mdi-lock</v-icon>\r\n                    </template>\r\n                    <span>{{lockMessage}}</span>\r\n                  </v-tooltip>\r\n                </template>\r\n            </v-select>\r\n            <v-text-field\r\n              v-else\r\n              label=\"Theme Name\"\r\n              :value=\"selectedTheme.name\"\r\n              @change=\"newThemeName = $event\"\r\n              dense outlined\r\n              hide-details>\r\n              <template v-slot:append-outer v-if=\"canEdit && themeIsSelected\">\r\n                <v-icon\r\n                  v-if=\"editThemeName\"\r\n                  color=\"green\" icon\r\n                  @click=\"updateThemeName()\">mdi-check-circle</v-icon>\r\n              </template>\r\n            </v-text-field>\r\n          </v-col>\r\n          <v-col\r\n          :cols=\"4\">\r\n            <v-switch\r\n              v-if=\"!_.isEmpty(selectedTheme)\"\r\n              v-model=\"activeSwitch\"\r\n              label=\"Active Theme\"/>\r\n          </v-col>\r\n\r\n          <v-col\r\n          :cols=\"1\">\r\n            <AddTheme\r\n              @add-theme=\"addTheme($event)\"/>\r\n          </v-col>\r\n          <v-col\r\n          :cols=\"1\">\r\n            <DeleteObj\r\n              v-if=\"canEdit && themeIsSelected\"\r\n              :objectType=\"'theme'\"\r\n              :objectToDelete=\"selectedTheme\"\r\n              @delete-object=\"deleteTheme($event)\"\r\n            />\r\n          </v-col>\r\n        </v-row>\r\n      </template>\r\n      <v-divider class=\"mt-1 mb-4\" v-if=\"themeIsSelected\"/>\r\n      <v-row v-if=\"!_.isEmpty(selectedTheme)\">\r\n        <v-col :cols=\"4\">\r\n          <v-card\r\n            :class=\"getCardClass('setup')\"\r\n            @click=\"active='setup'\">\r\n            <v-card-title\r\n              :class=\"getCardTextClass('setup')\">\r\n            Document Preferences\r\n            </v-card-title>\r\n          </v-card>\r\n        </v-col>\r\n        <v-col :cols=\"4\">\r\n          <v-card\r\n            color=\"primary\"\r\n            :class=\"getCardClass('builder')\"\r\n            @click=\"active='builder'\">\r\n            <v-card-title :class=\"getCardTextClass('builder')\">\r\n              Table Builder\r\n            </v-card-title>\r\n          </v-card>\r\n        </v-col>\r\n        <v-col :cols=\"4\">\r\n          <v-card\r\n            color=\"primary\"\r\n            :class=\"getCardClass('styler')\"\r\n            @click=\"active='styler'\">\r\n            <v-card-title  :class=\"getCardTextClass('styler')\">\r\n              Theme Styler\r\n            </v-card-title>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n      <v-row v-if=\"themes &&!_.isEmpty(selectedTheme)\">\r\n        <v-col>\r\n          <ThemeStyler\r\n            v-if=\"active==='styler' && !_.isEmpty(selectedTheme)\"\r\n            :theme=\"selectedTheme\"\r\n            :canEdit=\"canEdit\"\r\n          />\r\n          <ThemeBuilder\r\n            v-if=\"active==='builder' && !_.isEmpty(selectedTheme)\"\r\n            :theme=\"selectedTheme\"\r\n            :canEdit=\"canEdit\"\r\n          />\r\n          <ThemeSetup\r\n            v-if=\"active==='setup' && !_.isEmpty(selectedTheme)\"\r\n            :theme=\"selectedTheme\"\r\n            :canEdit=\"canEdit\"\r\n          />\r\n        </v-col>\r\n      </v-row>\r\n    </v-form>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport { apiService } from \"@/common/api.service.js\";\r\nimport AddTheme from \"@/components/AddTheme.vue\";\r\nimport WithoutWatchers from \"@/components/mixins/WithoutWatchers.js\";\r\nimport ThemeStyler from \"@/components/ThemeStyler.vue\";\r\nimport ThemeBuilder from \"@/components/ThemeBuilder.vue\";\r\nimport ThemeSetup from \"@/components/ThemeSetup.vue\";\r\nimport DeleteObj from \"@/components/DeleteObj.vue\"\r\nimport { mapGetters } from \"vuex\";\r\nimport {\r\n  USER_UPDATE\r\n} from \"@/store/actions.type\";\r\nimport {\r\n  SET_ACTIVE_USER_PROP\r\n} from \"@/store/mutations.type\";\r\n\r\nexport default {\r\n  name: \"ThemeTable\",\r\n  mixins: [WithoutWatchers],\r\n  props: {\r\n    scenario: {\r\n      type: Object,\r\n      required: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      activeSwitch: false,\r\n      error: null,\r\n      editThemeName: false,\r\n      selectedTheme: {},\r\n      newThemeName: '',\r\n      themes: null,\r\n      active: 'setup',\r\n    };\r\n  },\r\n  components: {\r\n    AddTheme,\r\n    ThemeStyler,\r\n    ThemeBuilder,\r\n    ThemeSetup,\r\n    DeleteObj,\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"activeUser\"]),\r\n    lockMessage() {\r\n      let msg = '';\r\n      if (!this.isNotAFSLLimited) {\r\n        msg += 'You cannot edit AFSL Themes'\r\n      }\r\n      else if (!this.isPracticeAdmin) {\r\n        msg += 'You are not an admin of this Practice'\r\n      }\r\n      return msg\r\n    },\r\n    canEdit() {\r\n      if (this.isPracticeAdmin && this.isNotAFSLLimited && this.isNotDefaultTemplate) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    isNotDefaultTemplate() {\r\n      if (this.themes && !this._.isEmpty(this.selectedTheme)) {\r\n        if (this.selectedTheme.template && this.selectedTheme.default) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    isPracticeAdmin() {\r\n      if (this.themes && !this._.isEmpty(this.selectedTheme)) {\r\n        if (this.selectedTheme.active_practices.length > 0) {\r\n          return this.selectedTheme.active_practices.some(item => this.activeUser.admin_practices.includes(item));\r\n        } else {\r\n          return true\r\n        }\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    isNotAFSLLimited() {\r\n      if (this.themes && this.selectedTheme) {\r\n        if (this._.isEmpty(this.selectedTheme.afsls)) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    selectedIsActive() {\r\n      if (this.selectedTheme) {\r\n        if (this.selectedTheme.id === this.activeUser.active_theme) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    scenarioTheme(){\r\n      if (this.scenario) {\r\n        return this.scenario.theme;\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n    themeIsSelected() {\r\n      return (!this._.isEmpty(this.selectedTheme) && !this.scenario)\r\n    }\r\n  },\r\n  watch: {\r\n    selectedTheme: function () {\r\n      this.setActiveSwitch()\r\n    },\r\n    activeSwitch: function () {\r\n      this.setActiveTheme()\r\n    },\r\n    scenarioTheme: function() {\r\n      this.setSelectedTheme();\r\n    }\r\n  },\r\n  methods: {\r\n    getCardClass(card) {\r\n      if (card === this.active) {\r\n        return 'primary rounded-card active-card'\r\n      } else {\r\n        return 'grey1 rounded-card'\r\n      }\r\n    },\r\n    getCardTextClass(card) {\r\n      if (card === this.active) {\r\n        return 'justify-center subtitle-2 font-weight-medium white--text'\r\n      } else {\r\n        return 'justify-center subtitle-2 font-weight-light'\r\n      }\r\n    },\r\n    deleteTheme(data) {\r\n      this.selectedTheme = {};\r\n      const i = this.themes.findIndex(item => item.id === data.id);\r\n      this.$delete(this.themes,i)\r\n    },\r\n    setActiveSwitch() {\r\n      this.$withoutWatchers(() => {\r\n        if (this.selectedIsActive) {\r\n          this.activeSwitch = true;\r\n        } else {\r\n          this.activeSwitch = false;\r\n        }\r\n      })\r\n    },\r\n    getThemeIndex(theme) {\r\n      return this.themes.findIndex(item => item.id === theme.id);\r\n    },\r\n    updateThemeName() {\r\n      this.updateTheme('name', this.newThemeName)\r\n      this.editThemeName = !this.editThemeName\r\n      this.newThemeName = null;\r\n    },\r\n    updateTheme(prop,value) {\r\n      if (value) {\r\n        let endpoint = `/api/themes/${this.selectedTheme.id}/`;\r\n        apiService(endpoint, \"PATCH\", {\r\n          [prop]: value,\r\n        }).then(data => {\r\n          this.selectedTheme[prop] = data[prop];\r\n          this.themes[this.getThemeIndex(data)] = data;\r\n          if (data.id === this.activeUser.active_theme) {\r\n            this.setActiveTheme();\r\n          }\r\n        });\r\n      }\r\n    },\r\n    setActiveTheme() {\r\n      let setActive = null;\r\n      if (this.activeSwitch) {\r\n        setActive = this.selectedTheme.id;\r\n      }\r\n      this.$store.commit(SET_ACTIVE_USER_PROP, {\r\n        'prop': 'active_theme',\r\n        'value': setActive\r\n      })\r\n      this.$store.dispatch(USER_UPDATE);\r\n    },\r\n    addTheme(data) {\r\n      this.themes.push(data);\r\n      this.selectedTheme = data;\r\n    },\r\n    getThemeData() {\r\n      let endpoint = `/api/themes/`;\r\n      apiService(endpoint).then(data => {\r\n        this.themes = data.results;\r\n        this.setSelectedTheme();\r\n        this.$emit('load-themes', data.results);\r\n      });\r\n    },\r\n    setSelectedTheme() {\r\n      if (!this._.isEmpty(this.scenario)) {\r\n        this.selectedTheme = this.themes.find(e => e.id === this.scenarioTheme);\r\n      } else if (this.activeUser.active_theme && this.themes){\r\n        this.selectedTheme = this.themes.find(e => e.id === this.activeUser.active_theme);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getThemeData();\r\n    this.setActiveSwitch()\r\n  }\r\n};\r\n</script>\r\n<style media=\"screen\">\r\n  .active-card:before {\r\n    background: none !important;\r\n  }\r\n</style>\r\n"]}]}