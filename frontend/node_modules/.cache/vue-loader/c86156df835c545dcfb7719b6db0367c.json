{"remainingRequest":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\src\\components\\ScenarioAAChartSummary.vue?vue&type=style&index=0&media=screen&lang=css&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\src\\components\\ScenarioAAChartSummary.vue","mtime":1610939324750},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Feez\\feez\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouZm9udFByZWxvYWRlcnsNCiAgZm9udC1mYW1pbHk6ICdQb3BwaW5zJzsNCiAgcG9zaXRpb246IGZpeGVkOw0KICB0b3A6IC05OTk5cHg7DQogIGxlZnQ6IC05OTk5cHg7DQp9DQo="},{"version":3,"sources":["ScenarioAAChartSummary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA;AACA;AACA;AACA;AACA;AACA","file":"ScenarioAAChartSummary.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\r\n  <v-card v-if=\"chartData != null\" class=\"rounded-card no-box-shadow-thin-border\">\r\n    <!-- <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Poppins&display=swap\" rel=\"stylesheet\"> -->\r\n    <v-container height=\"200px\">\r\n      <AABarChart\r\n        :chartData=\"chartData\"\r\n        :options=\"chartOptions\"\r\n        ref=\"AABarChart\"\r\n        :height=\"200\"\r\n\r\n      >\r\n      </AABarChart>\r\n    </v-container>\r\n  </v-card>\r\n</template>\r\n\r\n<script>\r\nimport AABarChart from \"@/components/AABarChart.vue\";\r\nimport { apiService } from \"@/common/api.service.js\";\r\nimport { mapGetters } from \"vuex\";\r\nimport MergeRPAllocations from \"@/components/mixins/MergeRPAllocations.js\"\r\nimport MergeAAAllocations from \"@/components/mixins/MergeAAAllocations.js\"\r\n\r\nexport default {\r\n  name: \"ScenarioAAChartSummary\",\r\n  mixins: [MergeRPAllocations, MergeAAAllocations],\r\n  props: {\r\n    riskProfile: {\r\n      type: Object,\r\n      required: false\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      AASummary: [],\r\n      chartOptions: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            yAxes: [{\r\n              gridLines: {\r\n                drawBorder: false,\r\n              },\r\n              ticks: {\r\n                fontColor: 'rgba(77,77,80)',\r\n                // fontFamily: \"'Poppins', sans-serif\",\r\n                beginAtZero: true,\r\n                maxTicksLimit: 6,\r\n                callback: function (value) {\r\n                  return value.toLocaleString('en-US', {style:'percent'});\r\n                }\r\n              }\r\n            }],\r\n            xAxes: [{\r\n                gridLines: {\r\n                  display: false,\r\n                },\r\n                ticks: {\r\n                  fontColor: 'rgba(77,77,80)',\r\n                  maxRotation: 0,\r\n                  callback: function (value) {\r\n                    let matches = value.match(/\\b(\\w)/g);\r\n                    let acronym = matches.join('');\r\n                    return acronym\r\n                  }\r\n                },\r\n            }],\r\n          onHover: function(e) {\r\n            e.target.style.cursor = 'pointer';\r\n          },\r\n        },\r\n        tooltips: {\r\n          callbacks: {\r\n            label: function(tooltipItem, data) {\r\n              let label = data.datasets[tooltipItem.datasetIndex].label || '';\r\n              if (label.length > 0) {\r\n                // label = this._.capitalize(label)\r\n                label += ': ';\r\n                label = label[0].toUpperCase() + label.slice(1).toLowerCase();\r\n              }\r\n              let val = tooltipItem.yLabel;\r\n              val = val.toLocaleString('en-US', {style:'percent', minimumFractionDigits:2});\r\n              label += val\r\n              return label\r\n            }\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: \"Asset Allocation\",\r\n\r\n        },\r\n        legend: {\r\n          position: 'top',\r\n          labels: {\r\n            fontColor: 'PRgrey',\r\n            fontSize: 10,\r\n            usePointStyle: true,\r\n          },\r\n          onHover: function(e) {\r\n            e.target.style.cursor = 'pointer';\r\n          },\r\n          onClick: function(e, legendItem) {\r\n            var index = legendItem.datasetIndex;\r\n            var ci = this.chart;\r\n            var meta = ci.getDatasetMeta(index);\r\n\r\n              if (meta.hidden == true) {\r\n                meta.hidden = false\r\n              } else {\r\n                meta.hidden = true;\r\n              }\r\n            ci.update();\r\n          }\r\n        },\r\n        hover: {\r\n         onHover: function(e) {\r\n            var point = this.getElementAtEvent(e);\r\n            if (!point.length) e.target.style.cursor = 'default';\r\n         }\r\n       }\r\n      }\r\n    };\r\n  },\r\n  watch: {\r\n    activeScenario() {\r\n      this.getAASummary();\r\n    },\r\n  },\r\n  components: {\r\n    AABarChart\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"activeScenario\"]),\r\n    RPArray() {\r\n      if (!this._.isEmpty(this.riskProfile)) {\r\n        return this.$mergeRPAllocations(this.AANames, this.activeScenario.risk_profile.allocations)\r\n      } else {\r\n        return []\r\n      }\r\n    },\r\n    AANames() {\r\n      let custom_names = this.AASummary.map(a => a.custom_name);\r\n      let aanames = [...new Set(custom_names)];\r\n      return aanames\r\n    },\r\n    currentAAArray() {\r\n      return this.$mergeAAAllocations(this.AANames, this.AASummary,'cur_total_perc')\r\n    },\r\n    recommendedAAArray() {\r\n      return this.$mergeAAAllocations(this.AANames, this.AASummary,'rec_total_perc')\r\n    },\r\n    alternativeAAArray() {\r\n      return this.$mergeAAAllocations(this.AANames, this.AASummary,'alt_total_perc')\r\n    },\r\n    chartData(){\r\n      return {\r\n        labels: this.AANames,\r\n        datasets: [\r\n          {\r\n            data: this.RPArray,\r\n            backgroundColor: 'rgba(0,168,93)',\r\n            borderColor: 'rgba(0,168,93)',\r\n            borderWidth: 1,\r\n            label: \"RISK PROFILE\"\r\n          },\r\n          {\r\n            data: this.currentAAArray,\r\n            backgroundColor: 'rgba(222, 72, 108)',\r\n            borderColor: 'rgba(222, 72, 108)',\r\n            borderWidth: 1,\r\n            label: \"CURRENT\"\r\n          },\r\n          {\r\n            data: this.recommendedAAArray,\r\n            backgroundColor: 'rgba(68,136,220)',\r\n            borderColor: 'rgba(68,136,220)',\r\n            borderWidth: 1,\r\n            label: \"RECOMMENDED\"\r\n          },\r\n          {\r\n            data: this.alternativeAAArray,\r\n            backgroundColor: 'rgba(238,205,75)',\r\n            borderColor: 'rgba(238,205,75)',\r\n            borderWidth: 1,\r\n            label: \"ALTERNATIVE\",\r\n          },\r\n        ]\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    getAASummary() {\r\n      if (!this._.isEmpty(this.activeScenario)) {\r\n        let endpoint = `/api/scenarios/${this.activeScenario.id}/aasummary/`;\r\n        apiService(endpoint).then(data => {\r\n          this.AASummary = data.results;\r\n        });\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getAASummary();\r\n  }\r\n};\r\n</script>\r\n<style media=\"screen\">\r\n.fontPreloader{\r\n  font-family: 'Poppins';\r\n  position: fixed;\r\n  top: -9999px;\r\n  left: -9999px;\r\n}\r\n</style>\r\n"]}]}